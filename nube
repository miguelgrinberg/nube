#!/bin/bash
set -e

VHOST_ROOT=/var/www

usage() {
    echo "Usage: sudo nube install          Install nube"
    echo "       nube upload-key            Register public SSH key (key is read from stdin)"
    echo "       nube install-plugin PLUGIN Install PLUGIN"
    echo "       nube create APPNAME        Create application APPNAME"
    echo "       nube destroy APPNAME       Delete application APPNAME"
    echo "       nube set APPNAME VAR VALUE Add an environment variable to APPNAME"
    echo "       nube unset APPNAME VAR     Remove an environment variable from APPNAME"
    echo "       nube up APPNAME            Start application APPNAME"
    echo "       nube down APPNAME          Stop application APPNAME"
}

DIRNAME=`dirname $0`

get_random_port() {
    port=$(($(od -An -N2 -i /dev/urandom)%62*1000+2000))
    while true
    do
        (echo >/dev/tcp/localhost/$port) &>/dev/null && port=$(($(od -An -N2 -i /dev/urandom)%62*1000+2000)) || break
    done
    echo $port
}

get_random_password() {
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c16
}

case "$1" in
  install)
    echo "-----> Installing dependencies ..."
    APACHE=$(pgrep apache2) || true
    if [ ! -z "$APACHE" ]; then
        service apache2 stop
        update-rc.d -f apache2 remove
    fi

    apt-get update

    # build stuff
    sudo apt-get -y install build-essential
     
    # git 
    apt-get -y install git

    # nginx
    apt-get -y install nginx
    rm -f /etc/nginx/sites-enabled/default
    /etc/init.d/nginx restart

    # python utilities
    apt-get -y install python-pip python-dev
    
    # supervisord
    apt-get -y install supervisor
    #pip install supervisor

    # honcho (Procfile handler)
    pip install honcho 
    #pip install https://github.com/miguelgrinberg/honcho/zipball/master
    
    # install static addon
    echo "-----> Installing static plugin ..."
    source $DIRNAME/plugins/static
    nube_static install

    echo "-----> Creating a root directory for virtual hosts ..."
    mkdir -p $VHOST_ROOT

    echo "-----> Creating a \"nube\" user ..."
    /usr/sbin/useradd -m nube || true
    mkdir -p /home/nube/.ssh
    touch /home/nube/.ssh/authorized_keys

    echo "-----> Creating a \"git\" user ..."
    wget -q https://raw.github.com/progrium/gitreceive/master/gitreceive
    chmod +x gitreceive
    mv gitreceive /usr/local/bin
    gitreceive init > /dev/null
    /usr/sbin/usermod -G nube git
    cat << EOF > /home/git/receiver
#!/bin/bash
sudo-nube __receive \$(basename \$1 .git) \$2
EOF
    chmod +x /home/git/receiver

    echo "-----> Installing \"nube\" ..."
    cat << EOF > sudo-nube.c
#include <unistd.h>
int main(int argc, char* argv[]) { setuid(0); return execvp("nube", argv); }
EOF
    gcc sudo-nube.c -o /usr/local/bin/sudo-nube
    rm sudo-nube.c
    cp $0 /usr/local/bin/nube
    chown root:nube /usr/local/bin/sudo-nube /usr/local/bin/nube
    chmod 4754 /usr/local/bin/sudo-nube /usr/local/bin/nube
    mkdir -p /usr/local/share/nube/plugins
    cp $DIRNAME/plugins/* /usr/local/share/nube/plugins

    echo "-----> Success!"
    echo "       Please upload your public key:"
    echo "         cat ~/.ssh/id_rsa.pub | ssh $USER@$HOSTNAME \"sudo nube upload-key\""
    ;;

  upload-key)
    echo "-----> Installing public key ..."
    sudo-nube __upload-key
    echo "-----> Success!"
    echo "       To issue commands without a password:"
    echo "         ssh nube@$HOSTNAME \"nube <cmd> <arg> ...\""
    ;;

  install-plugin)
    shift
    sudo-nube __install-plugin $@
    echo "-----> Success!"
    ;;

  create)
    APP=$2
    echo "-----> Creating $APP ..."
    sudo-nube __create $APP
    echo "-----> Success!"
    echo "       \"$APP\" is now ready. To push:"
    echo "         git remote add nube git@$HOSTNAME:$APP.git"
    echo "         git push nube master"
    ;;

  destroy)
    APP=$2
    echo "-----> Destroying $APP ..."
    sudo-nube __destroy $APP
    echo "-----> Success!"
    echo "       \"$APP\" has been removed from the system."
    ;;

  set)
    APP=$2
    VAR=$3
    if [ -z "$VAR" ]; then
        cat $VHOST_ROOT/$APP/.env
    else
        shift
        shift
        shift
        VALUE=$@
        echo "-----> Setting $VAR in $APP ..."
        sudo-nube __set $APP $VAR $VALUE
        echo "-----> Success!"
    fi
    ;;

  unset)
    APP=$2
    VAR=$3
    echo "-----> Removing $VAR from $APP ..."
    sudo-nube __unset $APP "$VAR"
    echo "-----> Success!"
    ;;
    
  # private options from here on, for internal use only!

  __upload-key)
    KEY=$(cat)
    echo $KEY | gitreceive upload-key git-user > /dev/null
    echo $KEY > /home/nube/.ssh/authorized_keys
    ;;

  __install-plugin)
    shift
    for PLUGIN in $@; do
        echo "-----> Installing $PLUGIN plugin ..."
        if [ ! -f /usr/local/share/nube/plugins/$PLUGIN ]; then
            echo Plugin $PLUGIN not found, skipping > /dev/stderr
        else
            source /usr/local/share/nube/plugins/$PLUGIN
            nube_$PLUGIN install
        fi
    done
    ;;

  __create)
    APP=$2
    /usr/sbin/useradd $APP
    mkdir $VHOST_ROOT/$APP
    ;;

  __destroy)
    APP=$2
    rm /etc/nginx/sites-available/$APP /etc/nginx/sites-enabled/$APP || true
    /etc/init.d/nginx reload
    supervisorctl stop $APP || true
    #stop $APP || true
    if [ -d $VHOST_ROOT/$APP/upstart ]; then
        for FILE in $VHOST_ROOT/$APP/upstart/*; do
            rm /etc/supervisor/conf.d/$(basename $FILE) || true
            #rm /etc/init/$(basename $FILE)
        done
    fi
    if [ -f $VHOST_ROOT/$APP/$REVISION/.env ]; then
        source $VHOST_ROOT/$APP/$REVISION/.env
        for ADDON in $NUBE_ADDONS; do
            source /usr/local/share/nube/plugins/$ADDON
            nube_$ADDON destroy $APP $VHOST_ROOT/$APP/$REVISION
        done
        source /usr/local/share/nube/plugins/$NUBE_TYPE
        nube_$NUBE_TYPE destroy $APP $VHOST_ROOT/$APP/$REVISION
    fi
    rm -rf $VHOST_ROOT/$APP
    /usr/sbin/userdel $APP
    ;;

  __set)
    APP=$2
    VAR=$3
    shift
    shift
    shift
    VALUE=$@
    touch $VHOST_ROOT/$APP/.env
    mv $VHOST_ROOT/$APP/.env $VHOST_ROOT/$APP/.tmp.env
    grep -v $VAR= $VHOST_ROOT/$APP/.tmp.env > $VHOST_ROOT/$APP/.env || true
    rm $VHOST_ROOT/$APP/.tmp.env
    echo "$VAR=\"$VALUE\"" >> $VHOST_ROOT/$APP/.env
    ;;
    
  __unset)
    APP=$2
    VAR=$3
    mv $VHOST_ROOT/$APP/.env $VHOST_ROOT/$APP/.tmp.env
    grep -v $VAR= $VHOST_ROOT/$APP/.tmp.env > $VHOST_ROOT/$APP/.env
    rm $VHOST_ROOT/$APP/.tmp.env
    ;;
    
  __receive)
    APP=$2
    REVISION=rev-$3
    if [ ! -d $VHOST_ROOT/$APP ]; then
        echo Error: application $APP does not exist. > /dev/stderr
        exit 1
    fi
    OLD_REVISION=
    for FILE in $VHOST_ROOT/$APP/rev-*; do
        if [ -d $FILE ]; then
            REV=$(basename $FILE)
            if [ "$REVISION" != "$REV" ]; then
                OLD_REVISION=$REV
                break
            fi
        fi
    done

    echo "-----> Installing $APP ..."
    rm -rf $VHOST_ROOT/$APP/$REVISION
    mkdir -p $VHOST_ROOT/$APP/$REVISION
    cat | tar -x -C $VHOST_ROOT/$APP/$REVISION
    chown -R $APP:$APP $VHOST_ROOT/$APP/$REVISION

    echo "-----> Detecting type of $APP ..."
    TYPE=
    for FILE in /usr/local/share/nube/plugins/*; do
        source $FILE
        PLUGIN=$(basename $FILE)
        D=`nube_$PLUGIN detect $APP $VHOST_ROOT/$APP/$REVISION`
        if [ "$D" == "yes" ]; then
            NUBE_TYPE=$PLUGIN
            break
        else
            if [ "$D" == "default" ]; then
                DEFAULT_TYPE=$PLUGIN
            fi
        fi
    done
    if [ -z "$NUBE_TYPE" ]; then
        NUBE_TYPE=$DEFAULT_TYPE
    fi
    echo Type is $NUBE_TYPE
    echo "NUBE_TYPE=$NUBE_TYPE" >> $VHOST_ROOT/$APP/.env

    echo "-----> Building $APP ..."
    nube_$NUBE_TYPE build $APP $VHOST_ROOT/$APP/$REVISION

    echo "-----> Deploying $APP ..."
    # stop previous version of the app
    supervisorctl stop $APP || true
    #stop $APP || true
    if [ -d $VHOST_ROOT/$APP/monitor ]; then
        for FILE in $VHOST_ROOT/$APP/monitor/*; do
            rm /etc/supervisor/conf.d/$(basename $FILE) || true
            #rm /etc/init/$(basename $FILE) || true
        done
    fi

    # import app environment
    touch $VHOST_ROOT/$APP/.env $VHOST_ROOT/$APP/$REVISION/.env
    cat $VHOST_ROOT/$APP/.env  >> $VHOST_ROOT/$APP/$REVISION/.env
    source $VHOST_ROOT/$APP/$REVISION/.env

    # pre-deploy hook
    if [ ! -z "$NUBE_HOOK_PRE_DEPLOY" ]; then
        su -p -c "cd $VHOST_ROOT/$APP/$REVISION && $NUBE_HOOK_PRE_DEPLOY" $APP
    fi

    # run add-ons
    for ADDON in $NUBE_ADDONS; do
        nube_$ADDON deploy $APP $VHOST_ROOT/$APP/$REVISION
    done
    source $VHOST_ROOT/$APP/$REVISION/.env

    # install Procfile
    if [ -f $VHOST_ROOT/$APP/$REVISION/Procfile ]; then
        mkdir -p $VHOST_ROOT/$APP/monitor
        PORT=$(get_random_port)
        honcho -f $VHOST_ROOT/$APP/$REVISION/Procfile -d $VHOST_ROOT/$APP/$REVISION export -a $APP -u $APP -p $PORT supervisord $VHOST_ROOT/$APP/monitor
        #honcho -f $VHOST_ROOT/$APP/$REVISION/Procfile -d $VHOST_ROOT/$APP/$REVISION export -a $APP -u $APP -p $PORT upstart $VHOST_ROOT/$APP/monitor
        sed -i -e '/^command=/s/\"/\\\"/g' $VHOST_ROOT/$APP/monitor/*
        sed -i -e 's/^command=\(.*\)$/command=bash -c \"\1\"/' $VHOST_ROOT/$APP/monitor/*
        cp $VHOST_ROOT/$APP/monitor/* /etc/supervisor/conf.d/
        #cp $VHOST_ROOT/$APP/monitor/* /etc/init/
        supervisorctl reread
        supervisorctl update
        #start $APP
    fi

    # post-deploy hook
    if [ ! -z "$NUBE_HOOK_POST_DEPLOY" ]; then
        su -p -c "cd $VHOST_ROOT/$APP/$REVISION && $NUBE_HOOK_POST_DEPLOY" $APP
    fi

    # deploy front facing virtual host on nginx
    nube_$NUBE_TYPE deploy $APP $VHOST_ROOT/$APP/$REVISION
    if [ -z "$NUBE_SERVER_NAME" ]; then
        NUBE_SERVER_NAME=_
    fi
    mkdir -p /var/log/$APP
    cat << EOF > /etc/nginx/sites-available/$APP
server {
    listen 80;
    server_name $NUBE_SERVER_NAME;
    access_log /var/log/$APP/access.log;
    error_log /var/log/$APP/error.log;
$NUBE_NGINX_FILES
$NUBE_NGINX_LOCATION
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    location ~ /Procfile {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF
    ln -s -f /etc/nginx/sites-available/$APP /etc/nginx/sites-enabled/$APP
    /etc/init.d/nginx reload

    # remove old version
    if [ ! -z "$OLD_REVISION" ]; then
        rm -rf $VHOST_ROOT/$APP/$OLD_REVISION
    fi
    echo "-----> $APP is now online!"
    ;;

  --help)
    usage
    ;;

  -h)
    usage
    ;;

  *)
    echo nube: \"$1\" is an invalid command. > /dev/stderr
    usage
    exit 1
    ;;
esac
